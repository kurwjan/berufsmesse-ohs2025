---
import "@/styles/globals.css"; // For shadcn
import "@fontsource-variable/inter"; // Supports weights 100-900

// YES I KNOW THIS IS UNNECESSARY BUT I WANT IT
import Color from "colorjs.io";
import colorGenerator from "material-dynamic-colors";
const colors = await colorGenerator("#327691");
const primaryColor = colors.light.primary;
const primaryContainerColor = new Color(colors.light.primaryContainer).to(
    "hsl",
);
primaryContainerColor.set({
    l: 92,
});
const pressedPrimaryContainerColor = new Color(
    colors.light.primaryContainer,
).to("hsl");
pressedPrimaryContainerColor.set({
    l: 88,
});
const darkPrimaryContainerColor = new Color(colors.light.primaryContainer).to(
    "hsl",
);
darkPrimaryContainerColor.set({
    l: 80,
});
const pressedDarkPrimaryContainerColor = new Color(
    colors.light.primaryContainer,
).to("hsl");
pressedDarkPrimaryContainerColor.set({
    l: 70,
});
const containerColor = colors.light.surface;
const darkContainerColor = colors.light.inverseOnSurface;
const darkerContainerColor = new Color(colors.light.inverseOnSurface).to("hsl");
darkerContainerColor.set({
    l: 85,
});
const darkestContainerColor = new Color(colors.light.inverseOnSurface).to(
    "hsl",
);
darkestContainerColor.set({
    l: 75,
});
const pressedDarkestContainerColor = new Color(
    colors.light.inverseOnSurface,
).to("hsl");
pressedDarkestContainerColor.set({
    l: 68,
});

import { ClientRouter } from "astro:transitions";

import { Image } from "astro:assets";
import schoolImage1 from "@assets/school_bg_1.jpg";
import schoolImage2 from "@assets/school_bg_2.jpg";
import schoolImage3 from "@assets/school_bg_3.jpg";
import schoolImage4 from "@assets/school_bg_4.jpg";

const schoolImages = [schoolImage1, schoolImage2, schoolImage3, schoolImage4];

import Header from "@components/Header.astro";
import Footer from "@/components/Footer.astro";

interface Props {
    title: string;
    heading: { format: string; text: string }[];
    image: number;
}

const { title, heading, image = 0 } = Astro.props;
---

<!doctype html>
<html lang="de">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="generator" content={Astro.generator} />
        <meta name="description" content="" />
        <!-- TODO: Head description -->
        <meta name="author" content="Dacjan Gapinski" />
        <meta name="theme-color" content="" />
        <!-- TODO: Head theme-color -->
        <title>{title}</title>
        <ClientRouter />
    </head>
    <body class="flex flex-col bg-[--dark-container-color]">
        <Header />
        <div class="hidden pc">
            <div
                class="flex flex-col gap-2 justify-center items-start text-start w-[50%] p-8"
            >
                <h1 class="font-bold font-display text-[26px]">
                    {
                        heading.map((part) => (
                            <span
                                class:list={[
                                    {
                                        "text-[--primary-color]":
                                            part.format == "colored",
                                    },
                                ]}
                            >
                                {part.newline && <br />}
                                {part.text}
                            </span>
                        ))
                    }
                </h1>
                <div class="max-w-[35em]">
                    <slot name="description" />
                </div>
            </div>
            <Image
                src={schoolImages[image]}
                alt="The school <Otto-Hahn-Schule> in Frankfurt."
                class="max-h-[450px] max-w-[50%] object-cover"
            />
        </div>
        <Image
            src={schoolImages[image]}
            alt="The school <Otto-Hahn-Schule> in Frankfurt."
            class="mobile max-h-[330px] object-cover"
        />
        <main
            class="p-5 pt-8 bg-white rounded-xl relative -top-3 flex flex-col gap-4 text-center text-[14px]"
        >
            <div class="mobile">
                <h1 class="font-semibold font-display text-[22px] mobile">
                    {
                        heading.map((part) => (
                            <span
                                class:list={[
                                    {
                                        "text-[--primary-color]":
                                            part.format == "colored",
                                    },
                                ]}
                            >
                                {part.newline && <br />}
                                {part.text}
                            </span>
                        ))
                    }
                </h1>
                <slot name="description" />
            </div>
            <slot />
        </main>
        <Footer />
    </body>
</html>

<style
    define:vars={{
        primaryColor,
        primaryContainerColor,
        pressedPrimaryContainerColor,
        darkPrimaryContainerColor,
        pressedDarkPrimaryContainerColor,
        containerColor,
        darkContainerColor,
        darkerContainerColor,
        darkestContainerColor,
        pressedDarkestContainerColor,
    }}
>
    html,
    body {
        margin: 0;
        height: 100%;
        width: 100%;
    }

    :global(@media only screen and (min-width: 700px)) {
        .pc {
            display: flex;
        }

        .mobile {
            display: none;
        }

        main {
            padding: 3rem !important;
        }
    }

    @media only screen and (min-width: 900px) {
        main {
            padding-left: 8rem !important;
            padding-right: 8rem !important;
        }
    }

    :global(:root) {
        --primary-color: var(--primaryColor);
        --primary-container-color: var(--primaryContainerColor);
        --pressed-primary-container-color: var(--pressedPrimaryContainerColor);
        --dark-primary-container-color: var(--darkPrimaryContainerColor);
        --pressed-dark-primary-container-color: var(
            --pressedDarkPrimaryContainerColor
        );
        --container-color: var(--containerColor);
        --dark-container-color: var(--darkContainerColor);
        --darker-container-color: var(--darkerContainerColor);
        --darkest-container-color: var(--darkestContainerColor);
        --pressed-darkest-container-color: var(--pressedDarkestContainerColor);
    }
</style>
